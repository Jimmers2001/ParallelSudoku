ALGORITHM: 
    There exists a main process with the global board. There are 9 mpi ranks that are associated respectively with blocks. 
    Each mpi rank tries a series of algorithms sequentially on its block (9 tiles) to solve tiles. 
        There exists a global variable that determines the number of guesses to make per recursion. 
        After those guesses, all processes restart and try again.
        
        If any of the ranks solve a tile, propagate the change to the main process which will change the global board and tell all processes
            to restart using the new standardized board. 

        If none of the ranks can solve a tile, they wait/terminate (still deciding) and the main makes *1-N guesses onto the shared global board
            If all of the tiles end in contradictions, then ONLY the main process needs to backtrack in its recursion of guessing on the global board.
            It makes a different guess, and has all processes try again from that point. 
        
        *for the 1-N gueses, each block finds the empty tile in their block and tells the main to guess on it
        using SIMULATED ANNEALING, start guessing very randomly (aka like 9 guesses) and as the problem gets smaller, guess more predictively (aka like only 3 guesses)

TODO:
    sequential simulated annealing solution with/without guessing and checking
    paralell simualted annealing solution with/without guessing and checking
    
    make a copy constructor for boards

    read from file instead of from string

    * Go through all the resources, summarize them with bulletpoint notes, see what we can use in our own project
    * Make a 16x16 version 

For parallel input
        Each block will read the corresponding section of the input string and write to the global board in parallel.
        Every process can just mutex lock and mutex unlock a global board variable but each process has its own 3x3 focus.
        
        We CANNOT have a 10th process that is stuck in a receive call waiting for a process to say that it has a "completion point" finished
            and then it prints to the output file because we need parallel output so each process needs its allotted section of the output file to write to
        Every time we solve a block, row, or column, it might not be final becaues we might need to backtrack. So rewrite the spot in the parallel output every time a new discovery is made in the same location

        they probably wont use allgather, scatter, broadcast but consider

for parallel output since I think each process needs to be designated a particular spot in the file,  
    the output could have each process with its block state, and its updated in parallel. 
    at the end, there is summary only written to by the main process that shows completion point outputs:
        "process %d solved row %d at time %d" (not completely necessary but nice to have)


NOTES: https://docs.google.com/document/d/1azOF4QCnrdBUBNR-wRTzyq7HK3anmsrOMwSMBIVHewo/edit?usp=sharing



RESOURCES:
https://cse.buffalo.edu/faculty/miller/Courses/CSE633/Sankar-Spring-2014-CSE633.pdf
https://www.geeksforgeeks.org/sudoku-backtracking-7/#                   -should we actually include this since its not scholarly?
http://www.individual.utoronto.ca/rafatrashid/Projects/2012/SudokuReport.pdf
https://link.springer.com/chapter/10.1007/978-3-642-13498-2_60
https://link.springer.com/chapter/10.1007/978-3-319-10783-7_23
https://link.springer.com/chapter/10.1007/978-981-10-8228-3_41
https://link.springer.com/article/10.1007/s10898-007-9138-0
https://arxiv.org/abs/0805.0697
https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=27652ea38aa6b36ee2bac358ed042120fd7172c9
https://shawnjzlee.me/dl/efficient-parallel-sudoku.pdf
https://alitarhini.wordpress.com/2012/02/27/parallel-sudoku-solver-algorithm/


//////////////////////////////////////////////////////////////////////////////////
    /*SudokuBoard* b1 = new SudokuBoard(complete_board);
    printf("***********************\nINITIAL BOARD STATE\n***********************\n");
    b1->printBoard();  
    if (b1->solveBoardSequential() == 0){
        printf("\n***********************\nBOARD IS SOLVED\n***********************\n");
    }
    else{
        printf("board is incomplete or incorrect\n");
    }
    b1->printBoard();  
    delete b1;*/
    //////////////////////////////////////////////////////////////////////////////////
    /*
    SudokuBoard* b2 = new SudokuBoard(incomplete_board);
    printf("***********************\nINITIAL BOARD STATE\n***********************\n");
    b2->printBoard();
    if (b2->solveBoardSequential() == 0){
        printf("\n***********************\nBOARD IS SOLVED\n***********************\n");
    }
    else{
        printf("board is incomplete or incorrect\n");
    }

    b2->printBoard();    
    delete b2;
    */
    //////////////////////////////////////////////////////////////////////////////////
    /*SudokuBoard* b3 = new SudokuBoard(evil_board);
    printf("***********************\nINITIAL BOARD STATE\n***********************\n");
    b3->printBoard();
    if (b3->solveBoardSequential() == 0){
        printf("\n***********************\nBOARD IS SOLVED\n***********************\n");
    }
    else{
        printf("board is incomplete or incorrect\n");
    }

    b3->printBoard();    
    delete b3;*/
    //////////////////////////////////////////////////////////////////////////////////
